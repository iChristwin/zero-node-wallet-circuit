
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0xa0, mod(calldataload(0x0), f_q))
mstore(0x80, 9474302177923587029583416818077483536813920189834464878924104029732031847194)

        {
            let x := calldataload(0x20)
            mstore(0xc0, x)
            let y := calldataload(0x40)
            mstore(0xe0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x100, keccak256(0x80, 128))
{
            let hash := mload(0x100)
            mstore(0x120, mod(hash, f_q))
            mstore(0x140, hash)
        }
mstore8(352, 1)
mstore(0x160, keccak256(0x140, 33))
{
            let hash := mload(0x160)
            mstore(0x180, mod(hash, f_q))
            mstore(0x1a0, hash)
        }
mstore8(448, 1)
mstore(0x1c0, keccak256(0x1a0, 33))
{
            let hash := mload(0x1c0)
            mstore(0x1e0, mod(hash, f_q))
            mstore(0x200, hash)
        }

        {
            let x := calldataload(0x60)
            mstore(0x220, x)
            let y := calldataload(0x80)
            mstore(0x240, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa0)
            mstore(0x260, x)
            let y := calldataload(0xc0)
            mstore(0x280, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x2a0, x)
            let y := calldataload(0x100)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x2e0, keccak256(0x200, 224))
{
            let hash := mload(0x2e0)
            mstore(0x300, mod(hash, f_q))
            mstore(0x320, hash)
        }

        {
            let x := calldataload(0x120)
            mstore(0x340, x)
            let y := calldataload(0x140)
            mstore(0x360, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x160)
            mstore(0x380, x)
            let y := calldataload(0x180)
            mstore(0x3a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3c0, keccak256(0x320, 160))
{
            let hash := mload(0x3c0)
            mstore(0x3e0, mod(hash, f_q))
            mstore(0x400, hash)
        }
mstore(0x420, mod(calldataload(0x1a0), f_q))
mstore(0x440, mod(calldataload(0x1c0), f_q))
mstore(0x460, mod(calldataload(0x1e0), f_q))
mstore(0x480, mod(calldataload(0x200), f_q))
mstore(0x4a0, mod(calldataload(0x220), f_q))
mstore(0x4c0, mod(calldataload(0x240), f_q))
mstore(0x4e0, mod(calldataload(0x260), f_q))
mstore(0x500, mod(calldataload(0x280), f_q))
mstore(0x520, mod(calldataload(0x2a0), f_q))
mstore(0x540, mod(calldataload(0x2c0), f_q))
mstore(0x560, keccak256(0x400, 352))
{
            let hash := mload(0x560)
            mstore(0x580, mod(hash, f_q))
            mstore(0x5a0, hash)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x5c0, x)
            let y := calldataload(0x300)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x320)
            mstore(0x600, x)
            let y := calldataload(0x340)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x360)
            mstore(0x640, x)
            let y := calldataload(0x380)
            mstore(0x660, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x680, keccak256(0x5a0, 224))
{
            let hash := mload(0x680)
            mstore(0x6a0, mod(hash, f_q))
            mstore(0x6c0, hash)
        }
mstore(0x6e0, mulmod(mload(0x3e0), mload(0x3e0), f_q))
mstore(0x700, mulmod(mload(0x6e0), mload(0x6e0), f_q))
mstore(0x720, mulmod(mload(0x700), mload(0x700), f_q))
mstore(0x740, mulmod(mload(0x720), mload(0x720), f_q))
mstore(0x760, addmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x780, mulmod(mload(0x760), 20520227692349320520856005386178695395514091625390032197217066424914820464641, f_q))
mstore(0x7a0, mulmod(mload(0x780), 2347812377031792896086586148252853002454598368280444936565603590212962918785, f_q))
mstore(0x7c0, addmod(mload(0x3e0), 19540430494807482326159819597004422086093766032135589407132600596362845576832, f_q))
mstore(0x7e0, mulmod(mload(0x780), 14434499761643624212374564569705863880641796706245613649257228426577899712446, f_q))
mstore(0x800, addmod(mload(0x3e0), 7453743110195651009871841175551411207906567694170420694440975759997908783171, f_q))
mstore(0x820, mulmod(mload(0x780), 4407920970296243842541313971887945403937097133418418784715, f_q))
mstore(0x840, addmod(mload(0x3e0), 21888242871839275217838484774961031246007050428528088939761107053157389710902, f_q))
mstore(0x860, mulmod(mload(0x780), 6253536085317186207246464833049627590927251685115435834607356421380913742894, f_q))
mstore(0x880, addmod(mload(0x3e0), 15634706786522089014999940912207647497621112715300598509090847765194894752723, f_q))
mstore(0x8a0, mulmod(mload(0x780), 8613538655231327379234925296132678673308827349856085326283699237864372525723, f_q))
mstore(0x8c0, addmod(mload(0x3e0), 13274704216607947843011480449124596415239537050559949017414504948711435969894, f_q))
mstore(0x8e0, mulmod(mload(0x780), 1307561275430600547084599052067232502310777467428991595475612152992795732190, f_q))
mstore(0x900, addmod(mload(0x3e0), 20580681596408674675161806693190042586237586932987042748222592033583012763427, f_q))
mstore(0x920, mulmod(mload(0x780), 1, f_q))
mstore(0x940, addmod(mload(0x3e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
{
            let prod := mload(0x7c0)

                prod := mulmod(mload(0x800), prod, f_q)
                mstore(0x960, prod)
            
                prod := mulmod(mload(0x840), prod, f_q)
                mstore(0x980, prod)
            
                prod := mulmod(mload(0x880), prod, f_q)
                mstore(0x9a0, prod)
            
                prod := mulmod(mload(0x8c0), prod, f_q)
                mstore(0x9c0, prod)
            
                prod := mulmod(mload(0x900), prod, f_q)
                mstore(0x9e0, prod)
            
                prod := mulmod(mload(0x940), prod, f_q)
                mstore(0xa00, prod)
            
                prod := mulmod(mload(0x760), prod, f_q)
                mstore(0xa20, prod)
            
        }
mstore(0xa60, 32)
mstore(0xa80, 32)
mstore(0xaa0, 32)
mstore(0xac0, mload(0xa20))
mstore(0xae0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xb00, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xa60, 0xc0, 0xa40, 0x20), 1), success)
{
            
            let inv := mload(0xa40)
            let v
        
                    v := mload(0x760)
                    mstore(1888, mulmod(mload(0xa00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x940)
                    mstore(2368, mulmod(mload(0x9e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x900)
                    mstore(2304, mulmod(mload(0x9c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x8c0)
                    mstore(2240, mulmod(mload(0x9a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x880)
                    mstore(2176, mulmod(mload(0x980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x840)
                    mstore(2112, mulmod(mload(0x960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x800)
                    mstore(2048, mulmod(mload(0x7c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x7c0, inv)

        }
mstore(0xb20, mulmod(mload(0x7a0), mload(0x7c0), f_q))
mstore(0xb40, mulmod(mload(0x7e0), mload(0x800), f_q))
mstore(0xb60, mulmod(mload(0x820), mload(0x840), f_q))
mstore(0xb80, mulmod(mload(0x860), mload(0x880), f_q))
mstore(0xba0, mulmod(mload(0x8a0), mload(0x8c0), f_q))
mstore(0xbc0, mulmod(mload(0x8e0), mload(0x900), f_q))
mstore(0xbe0, mulmod(mload(0x920), mload(0x940), f_q))
{
            let result := mulmod(mload(0xbe0), mload(0xa0), f_q)
mstore(3072, result)
        }
mstore(0xc20, addmod(mload(0x420), sub(f_q, mload(0x420)), f_q))
mstore(0xc40, mulmod(mload(0xc20), mload(0x440), f_q))
mstore(0xc60, mulmod(mload(0x300), mload(0xc40), f_q))
mstore(0xc80, addmod(1, sub(f_q, mload(0x4c0)), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xbe0), f_q))
mstore(0xcc0, addmod(mload(0xc60), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0x300), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0x520), mload(0x520), f_q))
mstore(0xd20, addmod(mload(0xd00), sub(f_q, mload(0x520)), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xb20), f_q))
mstore(0xd60, addmod(mload(0xce0), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0x300), mload(0xd60), f_q))
mstore(0xda0, addmod(mload(0x520), sub(f_q, mload(0x500)), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xbe0), f_q))
mstore(0xde0, addmod(mload(0xd80), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0x300), mload(0xde0), f_q))
mstore(0xe20, addmod(1, sub(f_q, mload(0xb20)), f_q))
mstore(0xe40, addmod(mload(0xb40), mload(0xb60), f_q))
mstore(0xe60, addmod(mload(0xe40), mload(0xb80), f_q))
mstore(0xe80, addmod(mload(0xe60), mload(0xba0), f_q))
mstore(0xea0, addmod(mload(0xe80), mload(0xbc0), f_q))
mstore(0xec0, addmod(mload(0xe20), sub(f_q, mload(0xea0)), f_q))
mstore(0xee0, mulmod(mload(0x480), mload(0x180), f_q))
mstore(0xf00, addmod(mload(0xc00), mload(0xee0), f_q))
mstore(0xf20, addmod(mload(0xf00), mload(0x1e0), f_q))
mstore(0xf40, mulmod(mload(0xf20), mload(0x4e0), f_q))
mstore(0xf60, mulmod(1, mload(0x180), f_q))
mstore(0xf80, mulmod(mload(0x3e0), mload(0xf60), f_q))
mstore(0xfa0, addmod(mload(0xc00), mload(0xf80), f_q))
mstore(0xfc0, addmod(mload(0xfa0), mload(0x1e0), f_q))
mstore(0xfe0, mulmod(mload(0xfc0), mload(0x4c0), f_q))
mstore(0x1000, addmod(mload(0xf40), sub(f_q, mload(0xfe0)), f_q))
mstore(0x1020, mulmod(mload(0x1000), mload(0xec0), f_q))
mstore(0x1040, addmod(mload(0xe00), mload(0x1020), f_q))
mstore(0x1060, mulmod(mload(0x300), mload(0x1040), f_q))
mstore(0x1080, mulmod(mload(0x4a0), mload(0x180), f_q))
mstore(0x10a0, addmod(mload(0x420), mload(0x1080), f_q))
mstore(0x10c0, addmod(mload(0x10a0), mload(0x1e0), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0x540), f_q))
mstore(0x1100, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x180), f_q))
mstore(0x1120, mulmod(mload(0x3e0), mload(0x1100), f_q))
mstore(0x1140, addmod(mload(0x420), mload(0x1120), f_q))
mstore(0x1160, addmod(mload(0x1140), mload(0x1e0), f_q))
mstore(0x1180, mulmod(mload(0x1160), mload(0x520), f_q))
mstore(0x11a0, addmod(mload(0x10e0), sub(f_q, mload(0x1180)), f_q))
mstore(0x11c0, mulmod(mload(0x11a0), mload(0xec0), f_q))
mstore(0x11e0, addmod(mload(0x1060), mload(0x11c0), f_q))
mstore(0x1200, mulmod(mload(0x740), mload(0x740), f_q))
mstore(0x1220, mulmod(1, mload(0x740), f_q))
mstore(0x1240, mulmod(mload(0x11e0), mload(0x760), f_q))
mstore(0x1260, mulmod(mload(0x6a0), mload(0x6a0), f_q))
mstore(0x1280, mulmod(mload(0x1260), mload(0x6a0), f_q))
mstore(0x12a0, mulmod(mload(0x580), mload(0x580), f_q))
mstore(0x12c0, mulmod(mload(0x12a0), mload(0x580), f_q))
mstore(0x12e0, mulmod(mload(0x12c0), mload(0x580), f_q))
mstore(0x1300, mulmod(mload(0x12e0), mload(0x580), f_q))
mstore(0x1320, mulmod(mload(0x1300), mload(0x580), f_q))
mstore(0x1340, mulmod(mload(0x1320), mload(0x580), f_q))
mstore(0x1360, mulmod(mload(0x1340), mload(0x580), f_q))
mstore(0x1380, mulmod(sub(f_q, mload(0x420)), 1, f_q))
mstore(0x13a0, mulmod(sub(f_q, mload(0x4c0)), mload(0x580), f_q))
mstore(0x13c0, mulmod(1, mload(0x580), f_q))
mstore(0x13e0, addmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x1400, mulmod(sub(f_q, mload(0x520)), mload(0x12a0), f_q))
mstore(0x1420, mulmod(1, mload(0x12a0), f_q))
mstore(0x1440, addmod(mload(0x13e0), mload(0x1400), f_q))
mstore(0x1460, mulmod(sub(f_q, mload(0x440)), mload(0x12c0), f_q))
mstore(0x1480, mulmod(1, mload(0x12c0), f_q))
mstore(0x14a0, addmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x14c0, mulmod(sub(f_q, mload(0x480)), mload(0x12e0), f_q))
mstore(0x14e0, mulmod(1, mload(0x12e0), f_q))
mstore(0x1500, addmod(mload(0x14a0), mload(0x14c0), f_q))
mstore(0x1520, mulmod(sub(f_q, mload(0x4a0)), mload(0x1300), f_q))
mstore(0x1540, mulmod(1, mload(0x1300), f_q))
mstore(0x1560, addmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x1580, mulmod(sub(f_q, mload(0x1240)), mload(0x1320), f_q))
mstore(0x15a0, mulmod(1, mload(0x1320), f_q))
mstore(0x15c0, mulmod(mload(0x1220), mload(0x1320), f_q))
mstore(0x15e0, addmod(mload(0x1560), mload(0x1580), f_q))
mstore(0x1600, mulmod(sub(f_q, mload(0x460)), mload(0x1340), f_q))
mstore(0x1620, mulmod(1, mload(0x1340), f_q))
mstore(0x1640, addmod(mload(0x15e0), mload(0x1600), f_q))
mstore(0x1660, mulmod(mload(0x1640), 1, f_q))
mstore(0x1680, mulmod(mload(0x13c0), 1, f_q))
mstore(0x16a0, mulmod(mload(0x1420), 1, f_q))
mstore(0x16c0, mulmod(mload(0x1480), 1, f_q))
mstore(0x16e0, mulmod(mload(0x14e0), 1, f_q))
mstore(0x1700, mulmod(mload(0x1540), 1, f_q))
mstore(0x1720, mulmod(mload(0x15a0), 1, f_q))
mstore(0x1740, mulmod(mload(0x15c0), 1, f_q))
mstore(0x1760, mulmod(mload(0x1620), 1, f_q))
mstore(0x1780, mulmod(sub(f_q, mload(0x4e0)), 1, f_q))
mstore(0x17a0, mulmod(sub(f_q, mload(0x540)), mload(0x580), f_q))
mstore(0x17c0, addmod(mload(0x1780), mload(0x17a0), f_q))
mstore(0x17e0, mulmod(mload(0x17c0), mload(0x6a0), f_q))
mstore(0x1800, mulmod(1, mload(0x6a0), f_q))
mstore(0x1820, mulmod(mload(0x13c0), mload(0x6a0), f_q))
mstore(0x1840, addmod(mload(0x1660), mload(0x17e0), f_q))
mstore(0x1860, addmod(mload(0x1680), mload(0x1800), f_q))
mstore(0x1880, addmod(mload(0x16a0), mload(0x1820), f_q))
mstore(0x18a0, mulmod(sub(f_q, mload(0x500)), 1, f_q))
mstore(0x18c0, mulmod(mload(0x18a0), mload(0x1260), f_q))
mstore(0x18e0, mulmod(1, mload(0x1260), f_q))
mstore(0x1900, addmod(mload(0x1840), mload(0x18c0), f_q))
mstore(0x1920, addmod(mload(0x1860), mload(0x18e0), f_q))
mstore(0x1940, mulmod(1, mload(0x3e0), f_q))
mstore(0x1960, mulmod(1, mload(0x1940), f_q))
mstore(0x1980, mulmod(14940766826517323942636479241147756311199852622225275649687664389641784935947, mload(0x3e0), f_q))
mstore(0x19a0, mulmod(mload(0x1800), mload(0x1980), f_q))
mstore(0x19c0, mulmod(2347812377031792896086586148252853002454598368280444936565603590212962918785, mload(0x3e0), f_q))
mstore(0x19e0, mulmod(mload(0x18e0), mload(0x19c0), f_q))
mstore(0x1a00, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x1a20, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x1a40, mload(0x1900))
success := and(eq(staticcall(gas(), 0x7, 0x1a00, 0x60, 0x1a00, 0x40), 1), success)
mstore(0x1a60, mload(0x1a00))
                    mstore(0x1a80, mload(0x1a20))
mstore(0x1aa0, mload(0xc0))
                    mstore(0x1ac0, mload(0xe0))
success := and(eq(staticcall(gas(), 0x6, 0x1a60, 0x80, 0x1a60, 0x40), 1), success)
mstore(0x1ae0, mload(0x220))
                    mstore(0x1b00, mload(0x240))
mstore(0x1b20, mload(0x1920))
success := and(eq(staticcall(gas(), 0x7, 0x1ae0, 0x60, 0x1ae0, 0x40), 1), success)
mstore(0x1b40, mload(0x1a60))
                    mstore(0x1b60, mload(0x1a80))
mstore(0x1b80, mload(0x1ae0))
                    mstore(0x1ba0, mload(0x1b00))
success := and(eq(staticcall(gas(), 0x6, 0x1b40, 0x80, 0x1b40, 0x40), 1), success)
mstore(0x1bc0, mload(0x260))
                    mstore(0x1be0, mload(0x280))
mstore(0x1c00, mload(0x1880))
success := and(eq(staticcall(gas(), 0x7, 0x1bc0, 0x60, 0x1bc0, 0x40), 1), success)
mstore(0x1c20, mload(0x1b40))
                    mstore(0x1c40, mload(0x1b60))
mstore(0x1c60, mload(0x1bc0))
                    mstore(0x1c80, mload(0x1be0))
success := and(eq(staticcall(gas(), 0x6, 0x1c20, 0x80, 0x1c20, 0x40), 1), success)
mstore(0x1ca0, 0x042cf852835c41881bddb1d5c058b4b02077c9eaa85743cde8ea139b20af9496)
                    mstore(0x1cc0, 0x0de6aae693484afb594dc4087e6af5f80267ebfa20befda959a16d5b97612f58)
mstore(0x1ce0, mload(0x16c0))
success := and(eq(staticcall(gas(), 0x7, 0x1ca0, 0x60, 0x1ca0, 0x40), 1), success)
mstore(0x1d00, mload(0x1c20))
                    mstore(0x1d20, mload(0x1c40))
mstore(0x1d40, mload(0x1ca0))
                    mstore(0x1d60, mload(0x1cc0))
success := and(eq(staticcall(gas(), 0x6, 0x1d00, 0x80, 0x1d00, 0x40), 1), success)
mstore(0x1d80, 0x09a8417450b57d0639118e90edcce63c72c682ef256882cd43cc82194015125e)
                    mstore(0x1da0, 0x2ff8eeab94da0934359af15948bb3437d4ab18e045e50a8436fa0d2ab563d63f)
mstore(0x1dc0, mload(0x16e0))
success := and(eq(staticcall(gas(), 0x7, 0x1d80, 0x60, 0x1d80, 0x40), 1), success)
mstore(0x1de0, mload(0x1d00))
                    mstore(0x1e00, mload(0x1d20))
mstore(0x1e20, mload(0x1d80))
                    mstore(0x1e40, mload(0x1da0))
success := and(eq(staticcall(gas(), 0x6, 0x1de0, 0x80, 0x1de0, 0x40), 1), success)
mstore(0x1e60, 0x188d32fb11eb75cda5fa3950412430727ac498c7a285120da6e7d59030a80343)
                    mstore(0x1e80, 0x2c38b456c20ae1f12bf2b7adc813caa8fa9986d9e1111c14d8ea40cadbdbbc88)
mstore(0x1ea0, mload(0x1700))
success := and(eq(staticcall(gas(), 0x7, 0x1e60, 0x60, 0x1e60, 0x40), 1), success)
mstore(0x1ec0, mload(0x1de0))
                    mstore(0x1ee0, mload(0x1e00))
mstore(0x1f00, mload(0x1e60))
                    mstore(0x1f20, mload(0x1e80))
success := and(eq(staticcall(gas(), 0x6, 0x1ec0, 0x80, 0x1ec0, 0x40), 1), success)
mstore(0x1f40, mload(0x340))
                    mstore(0x1f60, mload(0x360))
mstore(0x1f80, mload(0x1720))
success := and(eq(staticcall(gas(), 0x7, 0x1f40, 0x60, 0x1f40, 0x40), 1), success)
mstore(0x1fa0, mload(0x1ec0))
                    mstore(0x1fc0, mload(0x1ee0))
mstore(0x1fe0, mload(0x1f40))
                    mstore(0x2000, mload(0x1f60))
success := and(eq(staticcall(gas(), 0x6, 0x1fa0, 0x80, 0x1fa0, 0x40), 1), success)
mstore(0x2020, mload(0x380))
                    mstore(0x2040, mload(0x3a0))
mstore(0x2060, mload(0x1740))
success := and(eq(staticcall(gas(), 0x7, 0x2020, 0x60, 0x2020, 0x40), 1), success)
mstore(0x2080, mload(0x1fa0))
                    mstore(0x20a0, mload(0x1fc0))
mstore(0x20c0, mload(0x2020))
                    mstore(0x20e0, mload(0x2040))
success := and(eq(staticcall(gas(), 0x6, 0x2080, 0x80, 0x2080, 0x40), 1), success)
mstore(0x2100, mload(0x2a0))
                    mstore(0x2120, mload(0x2c0))
mstore(0x2140, mload(0x1760))
success := and(eq(staticcall(gas(), 0x7, 0x2100, 0x60, 0x2100, 0x40), 1), success)
mstore(0x2160, mload(0x2080))
                    mstore(0x2180, mload(0x20a0))
mstore(0x21a0, mload(0x2100))
                    mstore(0x21c0, mload(0x2120))
success := and(eq(staticcall(gas(), 0x6, 0x2160, 0x80, 0x2160, 0x40), 1), success)
mstore(0x21e0, mload(0x5c0))
                    mstore(0x2200, mload(0x5e0))
mstore(0x2220, mload(0x1960))
success := and(eq(staticcall(gas(), 0x7, 0x21e0, 0x60, 0x21e0, 0x40), 1), success)
mstore(0x2240, mload(0x2160))
                    mstore(0x2260, mload(0x2180))
mstore(0x2280, mload(0x21e0))
                    mstore(0x22a0, mload(0x2200))
success := and(eq(staticcall(gas(), 0x6, 0x2240, 0x80, 0x2240, 0x40), 1), success)
mstore(0x22c0, mload(0x600))
                    mstore(0x22e0, mload(0x620))
mstore(0x2300, mload(0x19a0))
success := and(eq(staticcall(gas(), 0x7, 0x22c0, 0x60, 0x22c0, 0x40), 1), success)
mstore(0x2320, mload(0x2240))
                    mstore(0x2340, mload(0x2260))
mstore(0x2360, mload(0x22c0))
                    mstore(0x2380, mload(0x22e0))
success := and(eq(staticcall(gas(), 0x6, 0x2320, 0x80, 0x2320, 0x40), 1), success)
mstore(0x23a0, mload(0x640))
                    mstore(0x23c0, mload(0x660))
mstore(0x23e0, mload(0x19e0))
success := and(eq(staticcall(gas(), 0x7, 0x23a0, 0x60, 0x23a0, 0x40), 1), success)
mstore(0x2400, mload(0x2320))
                    mstore(0x2420, mload(0x2340))
mstore(0x2440, mload(0x23a0))
                    mstore(0x2460, mload(0x23c0))
success := and(eq(staticcall(gas(), 0x6, 0x2400, 0x80, 0x2400, 0x40), 1), success)
mstore(0x2480, mload(0x600))
                    mstore(0x24a0, mload(0x620))
mstore(0x24c0, mload(0x1800))
success := and(eq(staticcall(gas(), 0x7, 0x2480, 0x60, 0x2480, 0x40), 1), success)
mstore(0x24e0, mload(0x5c0))
                    mstore(0x2500, mload(0x5e0))
mstore(0x2520, mload(0x2480))
                    mstore(0x2540, mload(0x24a0))
success := and(eq(staticcall(gas(), 0x6, 0x24e0, 0x80, 0x24e0, 0x40), 1), success)
mstore(0x2560, mload(0x640))
                    mstore(0x2580, mload(0x660))
mstore(0x25a0, mload(0x18e0))
success := and(eq(staticcall(gas(), 0x7, 0x2560, 0x60, 0x2560, 0x40), 1), success)
mstore(0x25c0, mload(0x24e0))
                    mstore(0x25e0, mload(0x2500))
mstore(0x2600, mload(0x2560))
                    mstore(0x2620, mload(0x2580))
success := and(eq(staticcall(gas(), 0x6, 0x25c0, 0x80, 0x25c0, 0x40), 1), success)
mstore(0x2640, mload(0x2400))
                    mstore(0x2660, mload(0x2420))
mstore(0x2680, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x26a0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x26c0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x26e0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x2700, mload(0x25c0))
                    mstore(0x2720, mload(0x25e0))
mstore(0x2740, 0x10723fb37a0c2a2a02a03850bf1edbf6f15c87665dac9f9f1233e9d4d616504b)
            mstore(0x2760, 0x06e5e16ab59ba2aa34a1d9bca4b824ff3e7e7825758c1f8f012e0895732188a8)
            mstore(0x2780, 0x04e6874ba3798963e13983a90e329b2ef67a5ae4e6cc820773712c78c89e4641)
            mstore(0x27a0, 0x23a20bed0e66df1b572720c3051d11e4356f999e532fe656a90f6cd039356bb2)
success := and(eq(staticcall(gas(), 0x8, 0x2640, 0x180, 0x2640, 0x20), 1), success)
success := and(eq(mload(0x2640), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}
        